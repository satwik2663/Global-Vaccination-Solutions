package userinterface.AdministrativeRole;

import Business.ConfigureASystem;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.VaccinationEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EventsByHosForOrphaWorkRequest;
import Business.WorkQueue.VaccineWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author raunak
 */
public class OrphanageViewServicesJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Network network;
    private UserAccount userAccount;
    private EcoSystem ecosystem;

    /**
     * Creates new form AdminWorkAreaJPanel
     */
    public OrphanageViewServicesJPanel(JPanel userProcessContainer, Enterprise enterprise, Network network, UserAccount userAccount, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.network = network;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        loginNode.setText(userAccount.toString());
        DateComboBox.setEnabled(false);
        //ecosystem = ConfigureASystem.configure();
        populateRequestTable();
        //valueLabel.setText(enterprise.getName());
    }

    private void populateDateComboBox(EventsByHosForOrphaWorkRequest request) {
        DateComboBox.removeAllItems();

        Date d1 = request.getVisitingDate1();
        Date d2 = request.getVisitingDate2();
        Date d3 = request.getVisitingDate3();
        DateComboBox.addItem(d1);
        
        if(d2==null || d2.toString().equals("")){
            
        }
        else{
          DateComboBox.addItem(d2);  
        }
        if(d3==null || d3.toString().equals("")){
            
        }
        else{
          DateComboBox.addItem(d3);  
        }
        

    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
            for (WorkRequest request : ent.getWorkQueue().getWorkRequestList()) {
                if (request instanceof EventsByHosForOrphaWorkRequest) {

                    String orphName = ((EventsByHosForOrphaWorkRequest) request).getOrphanageName();
                    String entName = enterprise.getName();
                    if ((orphName.equalsIgnoreCase(entName))) {
                        Object[] row = new Object[9];
                //TableColumn col = workRequestJTable.getColumnModel().getColumn(3);
                        //populateDateComboBox((EventsByHosForOrphaWorkRequest)request);

                //col.setCellEditor(new DefaultCellEditor(DateComboBox));
                        row[0] = ((EventsByHosForOrphaWorkRequest) request);
                        row[1] = ((EventsByHosForOrphaWorkRequest) request).getPurpose();
                        row[2] = ((EventsByHosForOrphaWorkRequest) request).getHospitalVisiting();
                        row[3] = ((EventsByHosForOrphaWorkRequest) request).getOrphanageName();
                        row[4] = ((EventsByHosForOrphaWorkRequest) request).getVisitingDate1();
                        row[5] = ((EventsByHosForOrphaWorkRequest) request).getVisitingDate2();
                        row[6] = ((EventsByHosForOrphaWorkRequest) request).getVisitingDate3();
                        row[7] = ((EventsByHosForOrphaWorkRequest) request).getStatus();
                        row[8] = ((EventsByHosForOrphaWorkRequest) request).getSelectedDate();
           // String result = ((StaffWorkRequest) request).getTestResult();
                        // row[3] = result == null ? "Waiting" : result;

                        model.addRow(row);

                    }
                }
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Date1JComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        AcceptJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        loginNode = new javax.swing.JLabel();
        DateComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        Date1JComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setBackground(new java.awt.Color(0, 153, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setText("Events Scheduled By : ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        AcceptJButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        AcceptJButton.setText("Confirm Event");
        AcceptJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptJButtonActionPerformed(evt);
            }
        });
        add(AcceptJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 350, 140, -1));

        refreshJButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        refreshJButton.setText("Refresh Table");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 350, -1, -1));

        backBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, -1, -1));

        workRequestJTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        workRequestJTable.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Purpose", "Participating Hospital", "Orphanage Name", "Event Date 1", "Event Date 2", "Event Date 3", "Status", "Selected Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(Date1JComboBox));
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 1060, 110));

        loginNode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loginNode.setText("<View_selected_node>");
        add(loginNode, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 50, -1, -1));

        DateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateComboBoxActionPerformed(evt);
            }
        });
        add(DateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 150, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Select Date : ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 100, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void AcceptJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        } else {
            

             //System.out.println(workRequestJTable.getValueAt(selectedRow, 0));
            
                EventsByHosForOrphaWorkRequest request = (EventsByHosForOrphaWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
                if (request.getStatus().equalsIgnoreCase("Confimred")) {

                    JOptionPane.showMessageDialog(null, "Request already acknowledged");
                } else {
                    Date d = (Date) DateComboBox.getSelectedItem();
                    request.setSelectedDate(d);
                    request.setStatus("Confimred");
                    request.setResolveDate(new Date());
                    System.out.println(d);
                    String email = (String) request.getSender().toString();
                    System.out.println(email);
                    String eventName = (String) request.toString();
                    String to = email;
                    String from = "Globalvaccinationnoreply";
                    String host = "smtp.gmail.com";
                    Properties props = new Properties();
                    props.put("mail.smtp.auth", "true");
                    props.put("mail.smtp.starttls.enable", "true");
                    props.put("mail.smtp.host", host);
                    props.put("mail.smtp.port", "587");
                    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
                    Session session = Session.getInstance(props,
                            new javax.mail.Authenticator() {
                                protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                                    return new javax.mail.PasswordAuthentication("Globalvaccinationnoreply", "Globalvaccinationnoreply@123");
                                }
                            }
                    );
                    try {
                        MimeMessage message = new MimeMessage(session);
                        message.setFrom(new InternetAddress(from));
                        message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));
                        message.setSubject("--STATUS-- Event Confirmed By  " + request.getOrphanageName());
                        message.setText("HELLO " + "\n\nEvent Confirmed for " + "\nevent Name: " + eventName + "\n\nfor Date" + request.getSelectedDate() + "\n\n\n\n**This is an automated message please do not reply**");

                        javax.mail.Transport.send(message);
                        JOptionPane.showMessageDialog(null, "The message has been sent ");

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }

                }
                populateRequestTable();
            
        }

    }//GEN-LAST:event_AcceptJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void DateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateComboBoxActionPerformed

    private void workRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMouseClicked
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            return;
        } else {
            DateComboBox.setEnabled(true);
            System.out.println(workRequestJTable.getValueAt(selectedRow, 0));

            EventsByHosForOrphaWorkRequest request = (EventsByHosForOrphaWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            populateDateComboBox(request);
        }
    }//GEN-LAST:event_workRequestJTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptJButton;
    private javax.swing.JComboBox Date1JComboBox;
    private javax.swing.JComboBox DateComboBox;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel loginNode;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

}
