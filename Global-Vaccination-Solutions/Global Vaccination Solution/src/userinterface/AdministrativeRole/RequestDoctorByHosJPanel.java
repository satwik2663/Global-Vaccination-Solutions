package userinterface.AdministrativeRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.VaccinationEnterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorByHosWorkRequest;
import Business.WorkQueue.VaccineWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class RequestDoctorByHosJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Network network;
    private UserAccount userAccount;

    /**
     * Creates new form AdminWorkAreaJPanel
     */
    public RequestDoctorByHosJPanel(JPanel userProcessContainer, Enterprise enterprise, Network network, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.network = network;
        this.userAccount = userAccount;
        populateRequestTable();
        //valueLabel.setText(enterprise.getName());
    }

    public void populateRequestTable() {
        //System.out.println("Testing123");
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {

            if (request instanceof DoctorByHosWorkRequest) {
                Object[] row = new Object[8];
                row[0] = ((DoctorByHosWorkRequest) request);
                row[1] = ((DoctorByHosWorkRequest) request).getrequestingDate();
                row[2] = ((DoctorByHosWorkRequest) request).getSender();
                row[3] = ((DoctorByHosWorkRequest) request).getReceiver();
                row[4] = ((DoctorByHosWorkRequest) request).getRequestDate();
                row[5] = ((DoctorByHosWorkRequest) request).getResolveDate();
                row[6] = ((DoctorByHosWorkRequest) request).getStatus();
                row[7] = ((DoctorByHosWorkRequest) request).getMessage();
                /* String result = ((StaffWorkRequest) request).getTestResult();
                 row[3] = result == null ? "Waiting" : result;
                 */
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        SubmitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CommentsTextField = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        RequestingDateTextField = new com.toedter.calendar.JDateChooser();
        enterpriseLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        workRequestJTable.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Physician Name", "Requested for Date", "Sender", "Receiver", "Requested Date", "Accepted Date", "Status", "Comments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 980, 110));

        SubmitButton.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        SubmitButton.setText("Sumbit Request");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });
        add(SubmitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 420, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Requesting for Date* : ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setText("Comments : ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, -1, -1));

        CommentsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommentsTextFieldActionPerformed(evt);
            }
        });
        add(CommentsTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, 530, -1));

        backBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 420, -1, -1));

        RequestingDateTextField.setMinSelectableDate(new Date());
        add(RequestingDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 320, 150, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Broadway", 1, 24)); // NOI18N
        enterpriseLabel1.setText("Request Physician by Hospitals");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 580, 80));
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        Date reqDate = RequestingDateTextField.getDate();
        String mess = CommentsTextField.getText();
        if (reqDate == null) {

            JOptionPane.showMessageDialog(null, "Date cannot be empty");
        } else {
            DoctorByHosWorkRequest request = new DoctorByHosWorkRequest();

            request.setrequestingDate(reqDate);
            //request.setvaccineQuantity(vacQuan);
            request.setdoctorName(null);
            request.setSender(userAccount);
            request.setReceiver(null);
            request.setRequestDate(new Date());
            request.setResolveDate(null);
            request.setStatus("Requested");
            request.setMessage(mess);

            Enterprise ent = null;
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HospitalEnterprise) {
                    ent = enterprise;
                    break;
                }
            }
            if (ent != null) {
                ent.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                //System.out.println();
            }
            //System.out.println("Testing");
            populateRequestTable();
        //System.out.println(userAccount.getWorkQueue().getWorkRequestList().get(0).toString());
            //System.out.println(userAccount.getWorkQueue().getWorkRequestList().get(1).toString());

        }
        RequestingDateTextField.setDate(null);
        CommentsTextField.setText("");
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void CommentsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommentsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CommentsTextFieldActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CommentsTextField;
    private com.toedter.calendar.JDateChooser RequestingDateTextField;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

}
